# name: CI-Build-Scan

# on:
#   push:
#     branches: [ main ]
#   pull_request:
#     branches: [ main ]

# permissions:
#   id-token: write   # for OIDC
#   contents: read

# env:
#   AWS_REGION: ${{ secrets.AWS_REGION }}
#   AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
#   ECR_REPO: ${{ secrets.ECR_REPO }}
#   DOCKER_IMAGE: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPO }}
#   IMAGE_TAG: ${{ github.sha }}

# jobs:
#   build-test-scan:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4

#       - name: Set up JDK 17
#         uses: actions/setup-java@v4
#         with:
#           distribution: 'temurin'
#           java-version: '17'
#           cache: 'maven'

#       - name: Build & test (Maven)
#         run: mvn -B -ntp clean verify

#       - name: Upload unit test reports
#         uses: actions/upload-artifact@v4
#         if: always()
#         with:
#           name: surefire-reports
#           path: target/surefire-reports/**/*

#       - name: SonarCloud Scan (optional)
#         if: ${{ secrets.SONAR_TOKEN != '' }}
#         uses: SonarSource/sonarcloud-github-action@v2
#         env:
#           SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#         with:
#           projectBaseDir: .

#       - name: Checkov scan (K8s manifests)
#         uses: bridgecrewio/checkov-action@v12
#         with:
#           directory: k8s
#           framework: kubernetes
#           soft_fail: false

#       - name: Configure AWS credentials (OIDC)
#         uses: aws-actions/configure-aws-credentials@v4
#         with:
#           role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
#           aws-region: ${{ env.AWS_REGION }}

#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v2

#       - name: Build Docker image
#         run: |
#           docker build -t $DOCKER_IMAGE:$IMAGE_TAG -t $DOCKER_IMAGE:latest .

#       - name: Trivy image scan (fail on CRITICAL)
#         uses: aquasecurity/trivy-action@0.24.0
#         with:
#           image-ref: ${{ env.DOCKER_IMAGE }}:${{ env.IMAGE_TAG }}
#           format: 'table'
#           vuln-type: 'os,library'
#           severity: 'CRITICAL'
#           ignore-unfixed: true
#           exit-code: '1'

#       - name: Push to ECR
#         run: |
#           docker push $DOCKER_IMAGE:$IMAGE_TAG
#           docker push $DOCKER_IMAGE:latest

#       - name: Slack notify (success)
#         if: success() && env.SLACK_WEBHOOK_URL != null
#         uses: rtCamp/action-slack-notify@v2
#         env:
#           SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
#           SLACK_COLOR: good
#           SLACK_MESSAGE: |
#             ✅ CI passed for ${{ github.repository }}@${{ github.sha }}
#             Image: ${{ env.DOCKER_IMAGE }}:${{ env.IMAGE_TAG }}

#     # Failure notification
#     timeout-minutes: 30

#   notify-on-failure:
#     needs: [build-test-scan]
#     runs-on: ubuntu-latest
#     if: failure()
#     steps:
#       - name: Slack notify (failure)
#         if: env.SLACK_WEBHOOK_URL != null
#         uses: rtCamp/action-slack-notify@v2
#         env:
#           SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
#           SLACK_COLOR: danger
#           SLACK_MESSAGE: |
#             ❌ CI failed for ${{ github.repository }}@${{ github.sha }}
