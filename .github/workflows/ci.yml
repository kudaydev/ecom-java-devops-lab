name: CI-Build-Scan

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  id-token: write   # for OIDC (push to main only)
  contents: read

jobs:
  build-test-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    # Bridge secrets into env so we can use them safely in `if:` expressions
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      ECR_REPO: ${{ secrets.ECR_REPO }}
      DOCKER_IMAGE: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPO }}
      IMAGE_TAG: ${{ github.sha }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      - name: Build & test (Maven)
        run: mvn -B -ntp clean verify

      - name: Upload unit test reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: surefire-reports
          path: target/surefire-reports/**/*

      - name: SonarCloud (Maven)
        if: ${{ env.SONAR_TOKEN != '' }}
        run: |
         mvn -B -ntp \
         -Dsonar.projectKey=kudaydev_ecom-java-devops-lab \
         -Dsonar.organization=kudaydev \
         -Dsonar.host.url=https://sonarcloud.io \
         -Dsonar.token=${{ env.SONAR_TOKEN }} \
          sonar:sonar

      - name: Checkov scan (K8s manifests)
        uses: bridgecrewio/checkov-action@master
        with:
          directory: ./k8s
          framework: kubernetes
          soft_fail: true

      # Only assume role and interact with AWS on pushes to main
      - name: Configure AWS credentials (OIDC) - only on push to main
        if: ${{ github.event_name == 'push' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR - only on push to main
        if: ${{ github.event_name == 'push' }}
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image
        run: |
          docker build -t $DOCKER_IMAGE:$IMAGE_TAG -t $DOCKER_IMAGE:latest .

      - name: Trivy image scan (fail on CRITICAL)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ env.DOCKER_IMAGE }}:${{ env.IMAGE_TAG }}
          format: 'table'
          vuln-type: 'os,library'
          severity: 'CRITICAL'
          ignore-unfixed: true
          exit-code: '1'

      - name: Push to ECR - only on push to main
        if: ${{ github.event_name == 'push' }}
        run: |
          docker push $DOCKER_IMAGE:$IMAGE_TAG
          docker push $DOCKER_IMAGE:latest

      - name: Slack notify (success)
        if: ${{ success() && env.SLACK_WEBHOOK_URL != '' }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ env.SLACK_WEBHOOK_URL }}
          SLACK_COLOR: good
          SLACK_MESSAGE: |
            ✅ CI passed for ${{ github.repository }}@${{ github.sha }}
            Image: ${{ env.DOCKER_IMAGE }}:${{ env.IMAGE_TAG }}
            Event: ${{ github.event_name }}

  notify-on-failure:
    needs: [build-test-scan]
    runs-on: ubuntu-latest
    if: failure()
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    steps:
      - name: Slack notify (failure)
        if: ${{ env.SLACK_WEBHOOK_URL != '' }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ env.SLACK_WEBHOOK_URL }}
          SLACK_COLOR: danger
          SLACK_MESSAGE: |
            ❌ CI failed for ${{ github.repository }}@${{ github.sha }}
            Event: ${{ github.event_name }}